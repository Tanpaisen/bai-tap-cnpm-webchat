//btl/server.js
const http = require('http');
const mongoose = require('mongoose');
const { Server } = require('socket.io');
const { app, sessionMiddleware } = require('./app/app');
const chatController = require('./chat_app/controllers/chatController');
const User = require('./chat_app/models/User');

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: 'http://localhost:3000',
    credentials: true
  },
  pingInterval: 25000,
  pingTimeout: 60000,
});

app.set('io', io);

// üîó Share session gi·ªØa Express & Socket.IO
io.use((socket, next) => {
  sessionMiddleware(socket.request, {}, next);
});

// üß† Socket.IO logic
io.on('connection', socket => {
  const sess = socket.request.session?.user;
  if (!sess) {
    socket.emit('unauthorized');
    return socket.disconnect();
  }

  const userId = sess._id.toString();
  const avatar = sess.avatar;
  const nickname = sess.nickname || '·∫®n danh';

  socket.userId = userId;
  socket.avatar = avatar;

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i online
  User.findByIdAndUpdate(userId, { online: true }).catch(console.error);

  // Join room
  socket.on('joinRoom', async roomId => {
    if (!roomId) return;
    socket.join(roomId);
    console.log(`${nickname} joined room ${roomId}`);

    /// ==========================================
    // [TH√äM M·ªöI] X·ª≠ l√Ω Typing Indicator
    // ========================================
    socket.on('typing', data => {
      if (!data.roomId) return;

      // ‚úÖ 1. S·ª¨ D·ª§NG PAYLOAD V√Ä G√ÅN ID/AVATAR
      const payload = {
        roomId: data.roomId,
        from: socket.userId,
        senderAvatar: socket.avatar,
        // B·∫°n c√≥ th·ªÉ th√™m c·∫£ nickname n·∫øu mu·ªën
        // senderNickname: socket.nickname
      };
      // ‚úÖ 2. Ph√°t s√≥ng ƒë·ªëi t∆∞·ª£ng payload
      socket.to(data.roomId).emit('typing', payload);
    });

    socket.on('stopTyping', data => {
      if (!data.roomId) return;

      // ‚úÖ S·ª¨A L·ªñI: T·∫°o payload ƒë·ªÉ g·ª≠i ID ng∆∞·ªùi g·ª≠i
      const payload = {
        roomId: data.roomId,
        from: socket.userId // V·∫´n n√™n truy·ªÅn 'from' ƒë·ªÉ client bi·∫øt ai ƒëang d·ª´ng g√µ (n·∫øu c·∫ßn)
      };

      // Ph√°t s√≥ng T·ªöI T·∫§T C·∫¢ m·ªçi ng∆∞·ªùi TRONG PH√íNG, TR·ª™ ch√≠nh ng∆∞·ªùi g·ª≠i
      socket.to(data.roomId).emit('stopTyping', payload);
    });

  });


  // Nh·∫≠n tin nh·∫Øn
  socket.on('newMessage', fullMsg => {
    // fullMsg l√† tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o DB v√† g·ª≠i t·ª´ Client
    if (!fullMsg || !fullMsg.roomId || !fullMsg.sender) {
      return console.warn('Invalid newMessage broadcast payload. Missing roomId or sender.');
    }

    // Ph√°t s√≥ng ƒë·∫øn T·∫§T C·∫¢ client TRONG PH√íNG, TR·ª™ CH√çNH NG∆Ø·ªúI G·ª¨I (socket.to)
    socket.to(fullMsg.roomId).emit('newMessage', fullMsg);
    console.log(`üì§ [Broadcast] Tin nh·∫Øn m·ªõi ƒë√£ ƒë∆∞·ª£c ph√°t s√≥ng t·ªõi ph√≤ng ${fullMsg.roomId}`);
  });

  // Disconnect
  socket.on('disconnect', () => {
    console.log(`üî¥ ${nickname} disconnected`);
    User.findByIdAndUpdate(userId, { online: false }).catch(console.error);
  });

});

// üöÄ K·∫øt n·ªëi Mongo v√† kh·ªüi ƒë·ªông server

mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ MongoDB Atlas connected');
    const PORT = process.env.PORT || 3000;
    server.listen(PORT, () => {
      console.log(`üöÄ Server running at http://localhost:${PORT}`);
    });
  })
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
  });