/* ================= GLOBALS ================= */
let currentRoomId = null, skip = 0, loadingHistory = false, loadingFriends = false;
const limit = 50, TYPING_DEBOUNCE = 1500;
let currentChatTo = null, typingTimer = null, MINE_ID = null, lastScrollTop = 0, seen = false, roomTypingTimers = {};
let renderedMessageIds = new Set();
const socket = io('http://localhost:3000', { withCredentials: true, autoConnect: true });

/* ================ UTILITIES ================ */
function getAvatar(u) {
  const DEFAULT = 'https://i.pinimg.com/originals/8d/a5/c3/8da5c3a06407303694d6381b23368f02.png';
  if (!u) return DEFAULT;
  return u?.avatar?.trim() ? u.avatar : DEFAULT;
}

async function tryFetchJson(endpoints = [], options = {}) {
  let lastErr = null;
  for (const ep of endpoints) {
    try {
      const res = await fetch(ep, options);

      const ct = (res.headers.get('content-type') || '').toLowerCase();
      const isJson = ct.includes('application/json');

      if (!res.ok) {
        // üí° T·ªëi ∆∞u: N·∫øu non-OK, c·ªë g·∫Øng l·∫•y JSON l·ªói
        if (isJson) {
          const errorData = await res.json().catch(() => ({}));
          lastErr = new Error(`HTTP ${res.status} ${ep}: ${errorData.error || 'Unknown Server Error'}`);
        } else {
          lastErr = new Error(`HTTP ${res.status} ${ep}`);
        }
        continue;
      }

      // N·∫øu OK v√† l√† JSON
      if (isJson) return await res.json();

      // Tr∆∞·ªùng h·ª£p c√≤n l·∫°i: OK nh∆∞ng kh√¥ng ph·∫£i JSON (r·∫•t hi·∫øm)
      const text = await res.text();
      try { return JSON.parse(text); } catch { lastErr = new Error(`Not JSON from ${ep}`); }
    } catch (err) { lastErr = err; }
  } throw lastErr || new Error('No endpoints succeeded');
}


function formatZaloTime(createdAt) {
  if (!createdAt) return '';
  const t = new Date(createdAt), now = new Date();
  const hh = t.getHours().toString().padStart(2, '0'), mm = t.getMinutes().toString().padStart(2, '0');
  if (t.toDateString() === now.toDateString()) return `${hh}:${mm}`;
  const dd = t.getDate().toString().padStart(2, '0'), MM = (t.getMonth() + 1).toString().padStart(2, '0');
  return `${dd}/${MM} ${hh}:${mm}`;
}

/* ================ DOM SELECTORS ================ */
const inputWrapper = document.getElementById('chat-input-wrapper'),
  funcBtns = document.querySelectorAll('.menu-buttons button[data-func]'),
  friendListEl = document.getElementById('friend-list-chat'),
  friendListFullEl = document.getElementById('friend-list-friends'),
  allUsersListEl = document.getElementById('all-user-list') || document.getElementById('all-users-list') || document.getElementById('friend-list-full'),
  requestsListEl = document.getElementById('requests-list'),
  messagesEl = document.getElementById('messages'),
  headerEl = document.getElementById('chat-with'),
  inputEl = document.getElementById('message-input'),
  fileInputEl = document.getElementById('file-input'),
  sendBtnEl = document.getElementById('send-btn'),
  typingIndicator = document.getElementById('typing-indicator'),
  typingIndicatorContainer = document.getElementById('typing-indicator-container'),
  logoutBtn = document.getElementById('logout-btn'),
  profileAvatar = document.getElementById('profile-avatar'),
  avatarInput = document.getElementById('avatar-input'),
  avatarUploadBtn = document.getElementById('avatar-upload-btn'),
  profileNickname = document.getElementById('profile-nickname'),
  nicknameInput = document.getElementById('nickname-input'),
  nicknameUpdateBtn = document.getElementById('nickname-update-btn'),
  passwordPopup = document.getElementById('change-password-popup'),
  passwordModal = document.getElementById('change-password-modal'),
  oldPasswordInput = document.getElementById('old-password'),
  newPasswordInput = document.getElementById('new-password'),
  passwordMsg = document.getElementById('password-msg');

/* ================ INITIALIZATION ================ */
window.addEventListener('DOMContentLoaded', async () => {
  try {
    await loadSessionUser();
    // üí° K√≠ch ho·∫°t ki·ªÉm tra y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi x√°c th·ª±c th√†nh c√¥ng
    checkPasswordChangeHint();
    attachUiEvents();
    // document.querySelector('[data-func="chat"]')?.click();
    const stored = sessionStorage.getItem('currentChatTo');
    if (stored) { sessionStorage.removeItem('currentChatTo'); await startChatWith(stored); }
  } catch (err) {
    console.error('Init error', err);
    // N·∫øu loadSessionUser kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c (l·ªói m·∫°ng, v.v.), ta v·∫´n c√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng.
    if (String(err.message).includes('401')) {
      location.href = '/login';
    }
  }
});

/* ================ UI / EVENTS ================ */
function showSection(id) {
  document.querySelectorAll('.main-content section').forEach(s => s.classList.remove('active'));
  document.getElementById(id)?.classList.add('active');
}

// Close profile overlay khi click n√∫t √ó
function closeProfileOverlay() {
  const profileOverlay = document.getElementById('chat-profile');
  profileOverlay?.classList.remove('active');
  document.querySelector('.main-content')?.classList.remove('profile-open');
}


function handleSidebarClick() {
  const buttons = document.querySelectorAll('.menu-buttons button[data-func]');
  buttons.forEach(btn => {
    btn.addEventListener('click', () => {
      const func = btn.dataset.func;

      // X√≥a active tr√™n t·∫•t c·∫£ c√°c n√∫t
      document.querySelectorAll('.menu-buttons button').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      // X√≥a active tr√™n t·∫•t c·∫£ c√°c list v√† section ch√≠nh (ƒë·ªÉ tr√°nh tr√πng l·∫∑p v·ªõi showSection)
      document.querySelectorAll('.list-section').forEach(s => s.classList.remove('active'));
      document.getElementById('section-welcome')?.classList.remove('active');

      // ----------------------------------------------------------------------
      // L∆ØU √ù: showSection s·∫Ω t·ª± x√≥a active c·ªßa c√°c section n·ªôi dung, n√™n ta ch·ªâ
      // c·∫ßn g·ªçi showSection v√† qu·∫£n l√Ω c√°c list section.
      // ----------------------------------------------------------------------

      if (func === 'chat') {
        document.getElementById('list-chat')?.classList.add('active');

        // [S·ª¨A ƒê·ªîI QUAN TR·ªåNG] Kh√¥i ph·ª•c tr·∫°ng th√°i chat cu·ªëi c√πng
        if (currentChatTo && currentRoomId) {
          // N·∫øu ƒëang chat v·ªõi ai ƒë√≥, hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï chat (section-chat)
          console.log('‚úÖ Sidebar Click: ƒê√£ kh√¥i ph·ª•c chat. Room ID:', currentRoomId);
          showSection('section-chat');

          // ƒê·∫£m b·∫£o client join l·∫°i ph√≤ng ƒë·ªÉ nh·∫≠n tin nh·∫Øn real-time
          socket.emit('joinRoom', currentRoomId);

          // T·∫£i l·∫°i danh s√°ch b·∫°n b√®/chat ƒë·ªÉ c·∫≠p nh·∫≠t (gi·ªØ nguy√™n logic loadFriends c≈©)
          loadFriends(true);
        } else {
          // N·∫øu ch∆∞a ch·ªçn ai, hi·ªÉn th·ªã m√†n h√¨nh ch√†o m·ª´ng
          console.log('‚ùå Sidebar Click: Kh√¥ng t√¨m th·∫•y chat c≈©, hi·ªÉn th·ªã welcome.');
          showSection('section-welcome');
          loadFriends(true);
        }
      }
      else if (func === 'friends') {
        document.getElementById('list-friends')?.classList.add('active');
        showSection('section-friends');
        // ƒê·∫£m b·∫£o tab b·∫°n b√® ƒëang ho·∫°t ƒë·ªông
        document.querySelectorAll('#friend-menu li').forEach(x => x.classList.remove('active'));
        document.querySelector('#friend-menu li[data-menu="friends"]')?.classList.add('active');
        // T·∫£i danh s√°ch b·∫°n b√®
        loadFriends(true);

      }
      else if (func === 'groups') {
        document.getElementById('list-groups')?.classList.add('active');
        showSection('section-groups');
      }
      else if (func === 'profile') {
        showSection('section-profile');
        loadProfile();
      }
    });
  });
}

function handleTypingInput() {
  // Kh√¥ng c·∫ßn log v√† ƒëi·ªÅu ki·ªán ki·ªÉm tra (if) n·∫øu b·∫°n ƒë√£ debug xong
  if (!inputEl) return;

  // ‚úÖ 1. T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao input
  inputEl.style.height = 'auto';
  inputEl.style.height = inputEl.scrollHeight + 'px';

  const text = inputEl.value.trim();

  // D√πng optional chaining ƒë·ªÉ tr√°nh crash n·∫øu bi·∫øn ch∆∞a k·ªãp kh·ªüi t·∫°o
  const roomId = currentRoomId;
  const chatTo = currentChatTo;

  // N·∫øu ch∆∞a c√≥ Room/Chat ID, kh√¥ng th·ªÉ g·ª≠i s·ª± ki·ªán socket. D·ª´ng ·ªü ƒë√¢y.
  if (!roomId || !chatTo) {
    // D·ªçn d·∫πp timer n·∫øu c√≥, ƒë·ªÉ tr√°nh timeout g·ª≠i stopTyping sau n√†y
    if (typingTimer) clearTimeout(typingTimer);
    typingTimer = null;
    return;
  }

  // 2. X√≥a timeout c≈© (n·∫øu c√≥)
  if (typingTimer) {
    clearTimeout(typingTimer);
  }

  // 3. N·∫øu kh√¥ng c√≤n vƒÉn b·∫£n (text r·ªóng), D·ª™NG G√ï NGAY L·∫¨P T·ª®C
  if (text === '') {
    console.log('Typing Action: Stop Typing (Empty Text) - SENT');
    socket.emit('stopTyping', { roomId: roomId, to: chatTo });
    typingTimer = null;
    return;
  }

  // 4. N·∫øu v·∫´n c√≤n vƒÉn b·∫£n (text KH√îNG r·ªóng)
  console.log('Typing Action: Send Typing (Text present) - SENT');

  socket.emit('typing', { roomId: roomId, to: chatTo });

  // Thi·∫øt l·∫≠p timeout m·ªõi
  typingTimer = setTimeout(() => {
    console.log('Typing Action: Stop Typing (Timeout) - SENT');
    socket.emit('stopTyping', { roomId: roomId, to: chatTo });
    typingTimer = null;
  }, TYPING_DEBOUNCE);
}

function attachUiEvents() {
  handleSidebarClick();

  const openProfileHandler = async (userId) => {
    // 1. Ki·ªÉm tra ID ng∆∞·ªùi d√πng
    if (!userId) return;

    try {
      // 2. G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      // tryFetchJson x·ª≠ l√Ω vi·ªác g·ªçi fetch, ki·ªÉm tra status (404/401), v√† parse JSON
      const user = await tryFetchJson([`/api/users/${userId}`], { credentials: 'include' });

      // 3. Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
      if (!user || !user._id) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng h·ª£p l·ªá');
      }

      // 4. ƒêi·ªÅn th√¥ng tin v√†o overlay
      document.getElementById('profile-name').textContent = user.nickname || user.username || 'Kh√¥ng t√™n';
      document.getElementById('profile-avatar-preview').src = getAvatar(user) || '/default-avatar.png';

      // 5. Hi·ªÉn th·ªã c√°c n√∫t ch·ª©c nƒÉng (n·∫øu c√≥)

      document.getElementById('profile-actions').style.ddisplay = 'block';

      // 6. M·ªü overlay profile
      const profileOverlay = document.getElementById('chat-profile');
      profileOverlay?.classList.add('active');
      document.querySelector('.main-content')?.classList.add('profile-open');
    } catch (err) {
      // 7. X·ª≠ l√Ω l·ªói
      console.error('L·ªói l·∫•y profile:', err);
      alert('Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng. L·ªói: ' + (err.message || 'L·ªói m·∫°ng/server'));
    }
  };


  /* --- CONSOLIDATED PROFILE OVERLAY LOGIC (ƒê√É S·ª¨A L·ªñI TR√ôNG L·∫∂P) --- */

  // Click avatar/t√™n m·ªü profile
  document.getElementById('chat-avatar')?.addEventListener('click', () => {
    if (!currentChatTo) return;
    openProfileHandler(currentChatTo);
  });

  document.getElementById('chat-name')?.addEventListener('click', () => {
    if (!currentChatTo) return;
    openProfileHandler(currentChatTo);
  });

  // Click n√∫t √ó ƒë√≥ng overlay
  document.getElementById('close-profile-btn')?.addEventListener('click', closeProfileOverlay);

  // Click b√™n ngo√†i overlay ƒë√≥ng
  document.addEventListener('click', (e) => {
    const profileOverlay = document.getElementById('chat-profile');
    const chatAvatar = document.getElementById('chat-avatar');
    const chatName = document.getElementById('chat-name');

    if (!profileOverlay?.classList.contains('active')) return;

    // Ki·ªÉm tra click c√≥ n·∫±m trong overlay, avatar, ho·∫∑c t√™n chat kh√¥ng
    const isClickInside = profileOverlay.contains(e.target) ||
      chatAvatar?.contains(e.target) ||
      chatName?.contains(e.target);

    if (!isClickInside) {
      closeProfileOverlay();
    }
  });

  /* --- END PROFILE LOGIC --- */


  // Friend menu sub-section
  document.getElementById('friend-menu')?.addEventListener('click', e => {
    const li = e.target.closest('li');
    if (!li) return;
    const menu = li.dataset.menu;
    document.querySelectorAll('#friend-menu li').forEach(x => x.classList.remove('active'));
    li.classList.add('active');

    if (menu === 'friends') { loadFriends(true); showSection('section-friends'); }
    else if (menu === 'requests') { loadRequests(); showSection('section-requests'); }
    else if (menu === 'all-user') { loadAllUsers(); showSection('section-all-users'); }
  });

  // Friend click ‚Üí m·ªü chat
  friendListEl?.addEventListener('click', e => {
    const li = e.target.closest('li'); if (!li) return;
    const id = li.dataset._id;

    // B·ªè qua n·∫øu click l·∫°i ng∆∞·ªùi ƒëang chat
    // if (!id || id === currentChatTo) return;


    friendListEl.querySelectorAll('li').forEach(x => x.classList.remove('active'));
    li.classList.add('active');

    const nickname = li.dataset.nickname || li.querySelector('span')?.textContent || 'B·∫°n';
    document.getElementById('chat-name').textContent = nickname;

    const avatar = li.querySelector('img')?.src || profileAvatar.src;

    document.getElementById('chat-name').textContent = nickname;
    document.getElementById('chat-avatar').src = avatar;

    // Hi·ªÉn th·ªã avatar + back button
    document.getElementById('chat-avatar').style.display = 'block';
    document.getElementById('back-btn').style.display = 'block';

    showSection('section-chat');
    if (id != currentChatTo) {
      startChatWith(id);
    }

    const roomId = [id, MINE_ID].sort().join('_');
    currentRoomId = roomId;

    socket.emit('joinRoom', roomId);

    // Khi click avatar trong list ‚Üí m·ªü profile
    li.querySelector('img')?.addEventListener('click', (event) => {
      event.stopPropagation();
      openProfileHandler(id); // overlay s·∫Ω hi·ªÉn th·ªã nickname t·ª´ server
    });

  });

  // Back button
  document.getElementById('back-btn')?.addEventListener('click', () => {
    currentChatTo = null;
    showSection('section-welcome');
    // ƒê·∫£m b·∫£o profile ƒë√≥ng khi quay l·∫°i m√†n h√¨nh welcome
    closeProfileOverlay();
  });

  // Send message
  sendBtnEl?.addEventListener('click', sendMessage);

  // Input behavior (ƒê√£ s·ª≠a l·ªói logic Double-Enter)
  if (inputEl) {
    inputEl.addEventListener('keydown', e => {
      if (e.key === 'Enter' && !e.shiftKey) {
        // Enter ƒë∆°n ‚Üí G·ª≠i tin nh·∫Øn
        e.preventDefault();
        sendMessage();
      } else if (e.key === 'Enter' && e.shiftKey) {
        // Shift + Enter ‚Üí Xu·ªëng d√≤ng (H√†nh vi m·∫∑c ƒë·ªãnh)
        // Kh√¥ng c·∫ßn l√†m g√¨, c·ª© ƒë·ªÉ h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa tr√¨nh duy·ªát
      }
    });

    // X·ª≠ l√Ω Typing Status v√† chi·ªÅu cao input (ƒê√∫ng v·ªã tr√≠, ch·ªâ g·ªçi 1 l·∫ßn)
    inputEl.addEventListener('input', () => {
      // T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao input
      inputEl.style.height = 'auto';
      inputEl.style.height = inputEl.scrollHeight + 'px';

      // X·ª≠ l√Ω Typing Status
      if (!socket.connected || !currentChatTo) return;
      if (typingTimer) clearTimeout(typingTimer);
      socket.emit('typing', { to: currentChatTo, roomId: currentRoomId });
      typingTimer = setTimeout(() => socket.emit('stopTyping', { to: currentChatTo, roomId: currentRoomId }), TYPING_DEBOUNCE);
    });
    inputEl.addEventListener('input', handleTypingInput);
  }

  // File input change preview optional
  fileInputEl?.addEventListener('change', () => { /* Logic Preview */ });

  // Avatar upload
  avatarInput?.addEventListener('change', () => {
    if (avatarInput.files?.[0]) {
      profileAvatar.src = URL.createObjectURL(avatarInput.files[0]);
    }
  });

  avatarUploadBtn?.addEventListener('click', async () => {
    const f = avatarInput.files?.[0]; if (!f) return alert('Ch·ªçn ·∫£nh tr∆∞·ªõc');
    const form = new FormData(); form.append('avatar', f);
    try {
      const res = await fetch('/api/users/update-avatar', { method: 'POST', body: form, credentials: 'include' });
      const data = await res.json();
      if (!data.success || !data.avatar) throw new Error('Upload th·∫•t b·∫°i');
      profileAvatar.src = data.avatar; alert('Avatar ƒë√£ c·∫≠p nh·∫≠t');
    } catch (err) {
      console.error('avatar upload', err);
      alert('Upload th·∫•t b·∫°i: ' + (err.message || 'L·ªói m·∫°ng/server'));
    }
  });

  // Update nickname
  nicknameUpdateBtn?.addEventListener('click', async () => {
    const newNick = nicknameInput?.value?.trim();
    if (!newNick) return alert('Nh·∫≠p nickname m·ªõi');

    try {
      const data = await tryFetchJson(['/api/users/update-nickname'], {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nickname: newNick })
      });

      // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server, k·ªÉ c·∫£ khi non-200
      if (data.success) {
        if (profileNickname) profileNickname.textContent = newNick;
        alert('Nickname ƒë√£ c·∫≠p nh·∫≠t');
      } else {
        // Tr∆∞·ªùng h·ª£p tryFetchJson th√†nh c√¥ng nh∆∞ng server v·∫´n g·ª≠i success: false
        throw new Error(data.error || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i kh√¥ng r√µ nguy√™n nh√¢n.');
      }

    } catch (err) {
      console.error('Network or JS error updating nickname', err);
      alert('C·∫≠p nh·∫≠t th·∫•t b·∫°i: ' + (err.message || 'L·ªói k·∫øt n·ªëi ho·∫∑c l·ªói n·ªôi b·ªô'));
    }
    finally {
      nicknameUpdateBtn.disabled = false; // K√≠ch ho·∫°t l·∫°i n√∫t
    }
  });

  // --- LOGIC ƒê·ªîI M·∫¨T KH·∫®U (TH√äM M·ªöI) ---

  // N√∫t "ƒê·ªïi ngay" tr√™n Popup
  document.getElementById('go-to-change-password')?.addEventListener('click', goToChangePassword);

  // N√∫t "Nh·∫Øc sau" tr√™n Popup
  document.getElementById('postpone-change-btn')?.addEventListener('click', postponeChange);

  // N√∫t "ƒê√≥ng" tr√™n Modal
  document.getElementById('close-password-modal-btn')?.addEventListener('click', closePasswordModal);

  // N√∫t "Submit" trong Modal
  document.getElementById('submit-password-change-btn')?.addEventListener('click', submitPasswordChange);

  // X·ª≠ l√Ω Enter trong Modal
  newPasswordInput?.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      submitPasswordChange();
    }
  });


  // Logout
  logoutBtn?.addEventListener('click', async () => {
    try {
      await fetch('/logout', { method: 'POST', credentials: 'include' });
    } catch (e) {
      console.error("Logout failed on fetch:", e);
    }
    location.href = '/login';
  });

  // Scroll handler (Load history)
  messagesEl?.addEventListener('scroll', () => {
    const scrollTop = messagesEl.scrollTop;
    const atTop = scrollTop === 0;
    const gap = messagesEl.scrollHeight - messagesEl.clientHeight - scrollTop;

    // ·∫®n/Hi·ªán input khi cu·ªôn
    inputWrapper?.classList.toggle('hide', scrollTop > lastScrollTop + 10);
    if (scrollTop < lastScrollTop - 10 || gap > 100) inputWrapper?.classList.remove('hide');

    lastScrollTop = scrollTop;

    // Logic t·∫£i l·ªãch s·ª≠ khi cu·ªôn l√™n ƒë·∫ßu
    if (atTop && !loadingHistory) {
      loadingHistory = true;
      loadHistory(true).finally(() => loadingHistory = false);
    }
  });

}


/* ================ PROFILE / SESSION ================ */
async function loadProfile() {
  try {
    const user = await tryFetchJson(['/api/users/profile']);
    profileAvatar && (profileAvatar.src = user.avatar);
    profileNickname && (profileNickname.textContent = user.nickname || 'Kh√¥ng t√™n');
    nicknameInput && (nicknameInput.value = user.nickname || '');
  } catch (err) { console.error('loadProfile', err); if (String(err.message).includes('401')) location.href = '/login'; }
}

// KH·∫ÆC PH·ª§C loadSessionUser TRONG chat.js 2
async function loadSessionUser() {
  try {
    // L·∫•y user profile. N·∫øu kh√¥ng c√≥ session, tryFetchJson s·∫Ω b√°o l·ªói 401.
    const user = await tryFetchJson(['/api/users/profile']);

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i v√† h·ª£p l·ªá kh√¥ng
    if (!user || !user._id) {
      // Tr∆∞·ªùng h·ª£p c√≥ l·ªói kh√¥ng ph·∫£i 401, nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu user.
      return location.href = '/login';
    }

    // Ki·ªÉm tra xem user ƒë√£ setup nickname ch∆∞a. N·∫øu ch∆∞a, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang setup.
    if (!user.nickname?.trim()) {
      return location.href = '/setup-nickname';
    }

    // G√°n ID ng∆∞·ªùi d√πng v√† load b·∫°n b√®
    MINE_ID = user._id || user.id;
    profileAvatar && (profileAvatar.src = user.avatar);
    profileNickname && (profileNickname.textContent = user.nickname);
    await loadFriends();

  } catch (err) {
    console.error('loadSessionUser', err);
    // ƒê√¢y l√† ƒëi·ªÉm ch·∫∑n ch√≠nh: N·∫øu tryFetchJson th·∫•t b·∫°i (do l·ªói 401),
    // chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p.
    if (String(err.message).includes('401') || String(err.message).includes('login')) {
      return location.href = '/login';
    }
    // N·∫øu l√† l·ªói kh√°c, v·∫´n c√≥ th·ªÉ hi·ªÉn th·ªã l·ªói nh∆∞ng kh√¥ng ch·∫∑n
  }
}

/* ================ FRIENDS / USERS / REQUESTS ================ */
async function loadFriends(full = false) {
  if (loadingFriends) return; loadingFriends = true;
  try {
    const arr = await tryFetchJson(['/api/friends', '/api/friends/list', '/api/friends/'], { credentials: 'include' });
    if (!Array.isArray(arr)) { console.warn('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c danh s√°ch b·∫°n b√®'); return; }
    friendListEl && (friendListEl.innerHTML = '');
    const seen = new Set();
    const uniqueFriends = arr.filter(u => { const id = u._id; if (seen.has(id)) return false; seen.add(id); return true; });
    if (uniqueFriends.length === 0) {
      friendListEl && (friendListEl.innerHTML = '<li>Kh√¥ng c√≥ b·∫°n n√†o</li>');
      friendListFullEl && (friendListFullEl.innerHTML = '<li>Kh√¥ng c√≥ b·∫°n n√†o</li>');
      return;
    }

    // =========================================================
    // 1. X·ª¨ L√ù DANH S√ÅCH CHAT (friendListEl) - KH√îNG C√ì N√öT H·ª¶Y K·∫æT B·∫†N
    // =========================================================
    uniqueFriends.forEach(u => {
      const id = u.id || u._id;
      const li = document.createElement('li');
      li.dataset._id = id;
      // [S·ª¨A]: CH·ªà C√ì AVATAR V√Ä T√äN
      li.innerHTML = `<img src="${getAvatar(u)}" class="avatar-sm"/><span>${u.nickname || 'V√¥ danh'}</span>`;
      friendListEl?.appendChild(li);
    });

    // =========================================================
    // 2. X·ª¨ L√ù DANH S√ÅCH B·∫†N B√à ƒê·∫¶Y ƒê·ª¶ (friendListFullEl) - C√ì N√öT H·ª¶Y K·∫æT B·∫†N
    // =========================================================
    if (full && friendListFullEl) {
      friendListFullEl.innerHTML = '';
      uniqueFriends.forEach(u => {
        const id = u._id;
        const li = document.createElement('li'); li.dataset._id = id;
        // C√≥ n√∫t H·ªßy k·∫øt b·∫°n, g·∫Øn ID v√†o data-id
        li.innerHTML = `<img src="${getAvatar(u)}" class="avatar-sm"/><span>${u.nickname || 'V√¥ danh'}</span><button class="unfriend-btn" data-id="${id}">H·ªßy k·∫øt b·∫°n</button>`;
        friendListFullEl.appendChild(li);

        //  G·∫ÆN S·ª∞ KI·ªÜN H·ª¶Y K·∫æT B·∫†N
        li.querySelector('.unfriend-btn')?.addEventListener('click', (e) => {
          const btn = e.currentTarget; // S·ª≠ d·ª•ng currentTarget ho·∫∑c e.target ƒë·ªÅu ƒë∆∞·ª£c, nh∆∞ng currentTarget an to√†n h∆°n n·∫øu c√≥ span b√™n trong n√∫t
          const friendId = btn.dataset.id; // L·∫•y ID t·ª´ data-id
          removeFriend(friendId, btn.closest('li')); // Truy·ªÅn ID v√† LI v√†o h√†m
        });
      });
    }
  } catch (err) { console.error('loadFriends', err); }
  finally { loadingFriends = false; }
}

async function loadAllUsers() {
  try {
    const users = await tryFetchJson(['/api/friends/all', '/api/friends/all-users', '/api/friends/allUsers'], { credentials: 'include' });
    if (!Array.isArray(users)) { allUsersListEl.innerHTML = '<li>Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o</li>'; return; }
    if (!allUsersListEl) return;
    allUsersListEl.innerHTML = '';
    users.forEach(u => {
      const id = u._id || u.id;
      const li = document.createElement('li');
      li.dataset._id = id;
      const btnLabel = u.status === 'none' ? 'K·∫øt b·∫°n' : u.status === 'pending' ? 'ƒêang ch·ªù' : u.status === 'incoming' ? 'Ch·∫•p nh·∫≠n' : 'B·∫°n b√®';
      li.innerHTML = `<img src="${getAvatar(u)}" class="avatar-sm"/><span>${u.nickname}</span><button class="action-btn">${btnLabel}</button>`;
      const btn = li.querySelector('.action-btn');
      if (btn) {
        if (u.status === 'incoming') btn.addEventListener('click', () => respondRequest(u.reqId || u.requestId, 'accept', btn));
        else if (u.status === 'none') btn.addEventListener('click', () => sendRequest(id, btn));
        else btn.disabled = true;
      }
      allUsersListEl.appendChild(li);
    });
  } catch (err) {
    console.error('loadAllUsers', err);
  }
}

async function loadRequests() {
  try {
    const arr = await tryFetchJson(['/api/friends/requests'], { credentials: 'include' });
    if (!Array.isArray(arr)) return;
    if (!requestsListEl) return;
    requestsListEl.innerHTML = '';
    arr.forEach(r => {
      const li = document.createElement('li');
      li.innerHTML = `<img src="${getAvatar(r)}" class="avatar-sm"/><span>${r.nickname}</span>
        <button class="accept-btn">Ch·∫•p nh·∫≠n</button>
        <button class="reject-btn">T·ª´ ch·ªëi</button>`;
      li.querySelector('.accept-btn')?.addEventListener('click', () => respondRequest(r.reqId, 'accept', li.querySelector('.accept-btn')));
      li.querySelector('.reject-btn')?.addEventListener('click', () => respondRequest(r.reqId, 'reject', li.querySelector('.reject-btn')));
      requestsListEl.appendChild(li);
    });
  } catch (err) {
    console.error('loadRequests', err);
  }
}

async function sendRequest(toId, btn) {
  try {
    console.log('Client sending request to:', toId);
    const res = await fetch('/api/friends/send', {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ to: toId })
    });
    const data = await res.json();
    if (data.success && btn) { btn.textContent = 'ƒêang ch·ªù'; btn.disabled = true; }
  } catch (err) {
    console.error('sendRequest', err);
  }
}

async function respondRequest(reqId, action, btn) {
  try {
    const res = await fetch('/api/friends/requests/respond', {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ requestId: reqId, action })
    });
    const data = await res.json();
    if (data.success && btn) { btn.textContent = action === 'accept' ? 'ƒê√£ ch·∫•p nh·∫≠n' : 'ƒê√£ t·ª´ ch·ªëi'; btn.disabled = true; }
    await loadRequests();
    await loadFriends(true);
  } catch (err) {
    console.error('respondRequest', err);
  }
}

function renderUserList(users, container, showUnfriend = false) {
  container.innerHTML = '';
  users.forEach(u => {
    const li = document.createElement('li');
    li.dataset._id = u._id;
    li.innerHTML = `<img src="${getAvatar(u)}" class="avatar-sm"/><span>${u.nickname}</span>`;
    if (showUnfriend) li.innerHTML += '<button class="unfriend-btn">H·ªßy k·∫øt b·∫°n</button>';
    container.appendChild(li);
  });
}


/* ================ CHAT HISTORY / MESSAGES ================ */
async function startChatWith(userId) {
  if (!MINE_ID || !userId) return;
  const newRoomId = [MINE_ID, userId].sort().join('_');
  if (newRoomId === currentRoomId && skip > 0) return;

  currentChatTo = userId;
  currentRoomId = newRoomId;
  skip = 0;

  renderedMessageIds.clear();

  if (messagesEl) messagesEl.innerHTML = '';
  if (inputWrapper) {
    inputWrapper.classList.remove('hide');
    inputWrapper.style.display = 'flex';
  }
  if (inputEl) {
    inputEl.value = '';
    inputEl.focus();
  }

  socket.emit('joinRoom', currentRoomId);

  await loadHistory(false);

  // ‚úÖ ƒê·ª£i DOM render xong r·ªìi m·ªõi cu·ªôn
  setTimeout(() => {
    if (messagesEl) messagesEl.scrollTop = messagesEl.scrollHeight;
  }, 50);
}

async function loadHistory(prepend = false) {
  if (!currentRoomId || !currentChatTo) return;
  try {
    const url = `/api/chat/history?user1=${MINE_ID}&user2=${currentChatTo}&limit=${limit}&skip=${skip}`;
    const arr = await tryFetchJson([url], { credentials: 'include' });
    if (!Array.isArray(arr) || !arr.length) return;

    const list = arr.reverse();

    const container = document.createDocumentFragment();
    let lastDate = null;

    for (const m of list) {
      const dstr = new Date(m.createdAt).toLocaleDateString('vi-VN');
      if (dstr !== lastDate) {
        lastDate = dstr;
        const sep = document.createElement('div');
        sep.className = 'date-separator';
        sep.innerText = dstr;
        container.appendChild(sep);
      }

      const sid = typeof m.sender === 'string' ? m.sender : (m.sender?._id || m.sender?.id);
      const isMine = String(sid) === String(MINE_ID);

      appendMessage({
        _id: m._id,
        senderAvatar: isMine ? profileAvatar?.src : getAvatar(m.sender),
        senderOnline: m.sender?.online,
        content: m.content,
        file: m.image || m.file,
        createdAt: m.createdAt
      }, isMine, container);
    }

    if (prepend) messagesEl.prepend(container);
    else messagesEl.appendChild(container);

    skip += list.length;

    if (messagesEl && typingIndicatorContainer) {
      messagesEl.appendChild(typingIndicatorContainer);
    }

    if (inputWrapper) {
      inputWrapper.classList.remove('hide');
      inputWrapper.style.display = 'flex';
    }
  } catch (err) {
    console.error('loadHistory', err);
  }
}

/* ================ MESSAGE BUILD / SEND ================ */
function appendMessage(data, self = false, container = messagesEl) {
  if (!container || !data || !data._id) return;
  if (renderedMessageIds.has(data._id)) return; // ‚úÖ b·ªè qua n·∫øu ƒë√£ render
  renderedMessageIds.add(data._id);

  const node = buildMessageNode(data, self);
  container.appendChild(node);

  // if (messagesEl && typingIndicatorContainer) {
  //   messagesEl.appendChild(typingIndicatorContainer);
  // }
}

function buildMessageNode({ senderAvatar, senderOnline, content, file, createdAt }, self) {
  const div = document.createElement('div');
  div.className = 'message' + (self ? ' self' : '');

  const bubble = document.createElement('div');
  bubble.className = 'bubble';

  if (content) {
    const p = document.createElement('p');
    p.innerHTML = escapeHtml(content).replace(/\n/g, '<br>');
    bubble.appendChild(p);
  }

  if (file) {
    let fileNode;
    if (/\.(jpe?g|png|gif|webp)$/i.test(file)) {
      fileNode = document.createElement('img');
      fileNode.src = file;
      fileNode.className = 'chat-image';
    } else {
      fileNode = document.createElement('a');
      fileNode.href = file;
      fileNode.target = '_blank';
      fileNode.className = 'file-link';
      fileNode.innerHTML = '<i class="fa-solid fa-link"></i> T·ªáp ƒë√≠nh k√®m';
    }
    bubble.appendChild(fileNode);
  }

  const timeSpan = document.createElement('span');
  timeSpan.className = 'time';
  timeSpan.textContent = formatZaloTime(createdAt);
  bubble.appendChild(timeSpan);

  // Avatar wrapper
  const avatarWrapper = document.createElement('div');
  avatarWrapper.className = 'avatar-wrapper';
  const img = document.createElement('img');
  img.src = senderAvatar || getAvatar();
  img.className = 'avatar-sm';
  avatarWrapper.appendChild(img);

  if (senderOnline) {
    const online = document.createElement('span');
    online.className = 'online-indicator';
    avatarWrapper.appendChild(online);
  }

  div.appendChild(avatarWrapper);
  div.appendChild(bubble);

  return div;
}

function escapeHtml(s) {
  if (!s) return '';
  return s.replace(/[&<>"']/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' })[c]);
}

async function sendMessage() {
  if (!currentChatTo || !currentRoomId) { alert('Ch·ªçn b·∫°n ƒë·ªÉ chat tr∆∞·ªõc'); return; }
  const raw = inputEl?.value?.replace(/[\s\n]+$/g, '') || '';
  const text = raw.split('\n').map(l => l.trim()).join('\n');
  const files = fileInputEl?.files || [];
  if (!text && files.length === 0) return;

  // N·∫øu ƒëang g·ª≠i, b·ªè qua l·∫ßn nh·∫•n Enter ti·∫øp theo
  if (seen) return;
  seen = true;

  let fileUrl = null;
  if (files.length) {
    const f = files[0];
    const api = f.type.startsWith('image/') ? '/api/upload/image' : '/api/upload/file';
    const form = new FormData();
    form.append(f.type.startsWith('image/') ? 'image' : 'file', f);
    try {
      const res = await fetch(api, { method: 'POST', credentials: 'include', body: form });
      const d = await res.json();
      if (!d.success || !d.url) throw new Error('Upload th·∫•t b·∫°i');
      fileUrl = d.url;
    } catch (err) {
      console.error('upload', err);
      alert('Upload th·∫•t b·∫°i');
      seen = false;
      return;
    }
  }

  const payload = { receiver: currentChatTo, roomId: currentRoomId, text, file: fileUrl };
  try {
    const res = await fetch('/api/chat/send', {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw new Error('Save failed');
    let savedMsg = await res.json();
    if (savedMsg.room && !savedMsg.roomId) {
      savedMsg.roomId = savedMsg.room;
      delete savedMsg.room; // X√≥a tr∆∞·ªùng c≈© ƒë·ªÉ nh·∫•t qu√°n
    }

    // Append locally (ƒë·∫£m b·∫£o c√≥ _id)
    appendMessage({
      _id: savedMsg._id,
      senderAvatar: savedMsg.sender?.avatar || profileAvatar?.src,
      senderOnline: savedMsg.sender?.online ?? true,
      content: savedMsg.content,
      file: savedMsg.file,
      createdAt: savedMsg.createdAt
    }, true);

    socket.emit('newMessage', savedMsg);

    if (typingIndicatorContainer && messagesEl) {
      messagesEl.appendChild(typingIndicatorContainer);
    }

    messagesEl.scrollTop = messagesEl.scrollHeight;
    
    if (inputEl) { inputEl.value = ''; inputEl.style.height = 'auto'; inputEl.focus(); }
    if (fileInputEl) fileInputEl.value = '';
  } catch (err) {
    console.error('sendMessage', err);
    alert('G·ª≠i tin nh·∫Øn th·∫•t b·∫°i');
  }
  finally {
    seen = false;
  }
}

/* ================ SAFE HELPERS ================ */
async function removeFriend(targetId, listItem) {
  if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy k·∫øt b·∫°n?')) return;
  try {
    const res = await fetch('/api/friends/remove', {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ targetId }) // targetId l√† ID c·∫ßn h·ªßy k·∫øt b·∫°n
    });
    const data = await res.json();
    if (data.success) {
      listItem && listItem.remove(); //  X√≥a LI kh·ªèi danh s√°ch UI n·∫øu c√≥
      alert('ƒê√£ h·ªßy k·∫øt b·∫°n');
      await loadFriends(true); // T·∫£i l·∫°i danh s√°ch chat v√† danh s√°ch b·∫°n b√®
    } else {
      alert(data.error || 'H·ªßy k·∫øt b·∫°n th·∫•t b·∫°i');
    }
  } catch (err) {
    console.error('removeFriend', err);
    alert('L·ªói khi h·ªßy k·∫øt b·∫°n');
  }
}


/* ================ SOCKET EVENTS ================ */
socket.on('connect', () => {
  console.log('socket connected', socket.id);
  // rejoin current room if any
  if (currentRoomId) socket.emit('joinRoom', currentRoomId);
});
socket.on('disconnect', reason => console.log('socket disconnected', reason));

// show typing indicator when server emits
socket.on('typing', data => {
  // 1. Ki·ªÉm tra c√°c ph·∫ßn t·ª≠ DOM quan tr·ªçng (n√™n c√≥)
  if (!typingIndicatorContainer) return;

  // 2. CHU·∫®N H√ìA v√† KI·ªÇM TRA ID
  const incomingRoomId = String(data.roomId);
  const currentRoom = String(currentRoomId);
  const senderId = String(data.from);

  // Ki·ªÉm tra xem s·ª± ki·ªán c√≥ thu·ªôc v·ªÅ ph√≤ng hi·ªán t·∫°i v√† kh√¥ng ph·∫£i tin nh·∫Øn c·ªßa ch√≠nh m√¨nh
  if (incomingRoomId !== currentRoom || senderId === String(MINE_ID)) {
    // N·∫øu kh√¥ng thu·ªôc ph√≤ng hi·ªán t·∫°i, ho·∫∑c l√† s·ª± ki·ªán t·ª´ ch√≠nh m√¨nh -> ·∫®N ch·ªâ b√°o g√µ
    // N·∫øu ƒëang hi·ªÉn th·ªã, c·∫ßn ·∫©n n√≥ ƒëi ngay l·∫≠p t·ª©c (tr√°nh b·ªã k·∫πt)
    if (typingIndicatorContainer.style.display === 'flex') {
      typingIndicatorContainer.style.display = 'none';
    }
    return;
  }
  // 2. C·∫¨P NH·∫¨T AVATAR 
  const avatarImg = typingIndicatorContainer.querySelector('.avatar-sm');
  if (avatarImg) {
    // S·ª≠ d·ª•ng h√†m getAvatar n·∫øu c·∫ßn x·ª≠ l√Ω URL r·ªóng/m·∫∑c ƒë·ªãnh
    avatarImg.src = data.senderAvatar || getAvatar(null);
  }
  // 3. HI·ªÇN TH·ªä CH·ªà B√ÅO G√ï (ƒê√É QUA T·∫§T C·∫¢ C√ÅC B∆Ø·ªöC KI·ªÇM TRA)
  typingIndicatorContainer.style.display = 'flex';

  // X√≥a timeout c≈© n·∫øu ng∆∞·ªùi n√†y v·∫´n ƒëang g√µ
  if (roomTypingTimers[data.roomId]) clearTimeout(roomTypingTimers[data.roomId]);

  // Thi·∫øt l·∫≠p timeout m·ªõi (1.7 gi√¢y)
  roomTypingTimers[data.roomId] = setTimeout(() => {
    typingIndicatorContainer.style.display = 'none'; // ·∫®n container
    delete roomTypingTimers[data.roomId];
  }, 1700);

  // T·ª± ƒë·ªông cu·ªôn xu·ªëng
  if (messagesEl) {
    messagesEl.scrollTo({ top: messagesEl.scrollHeight, behavior: 'smooth' });
  }
});

// B·∫°n c≈©ng c·∫ßn ki·ªÉm tra l·∫°i h√†m stopTyping
socket.on('stopTyping', data => {
  const incomingRoomId = String(data.roomId);
  const currentRoom = String(currentRoomId);

  if (typingIndicatorContainer && incomingRoomId === currentRoom) {
    typingIndicatorContainer.style.display = 'none'; // ·∫®n container
    // X√≥a lu√¥n timer
    if (roomTypingTimers[data.roomId]) {
      clearTimeout(roomTypingTimers[data.roomId]);
      delete roomTypingTimers[data.roomId];
    }
  }
});

socket.on('newMessage', msg => {
  try {
    // console.log('‚úÖ SOCKET RECEIVE: Tin nh·∫Øn m·ªõi ƒë√£ ƒë·∫øn Client:', msg);
    const incomingRoomId = msg.roomId || msg.room;
    if (!msg || !msg.sender || !incomingRoomId) return;
    // console.log(`Debug Room: Tin nh·∫Øn RoomID=${incomingRoomId}, Current RoomID=${currentRoomId}`);

    // Ch·ªâ x·ª≠ l√Ω n·∫øu ƒëang ·ªü ƒë√∫ng ph√≤ng
    if (incomingRoomId !== currentRoomId) {
      // console.warn('‚ùå SOCKET BLOCK (Room Mismatch): B·ªè qua v√¨ kh√¥ng ph·∫£i ph√≤ng hi·ªán t·∫°i.');
      return;
    }

    // B·ªè qua tin c·ªßa ch√≠nh m√¨nh
    const sid = msg.sender._id || msg.sender.id;
    // console.log(`Debug Sender: Tin nh·∫Øn SenderID=${sid}, MINE_ID=${MINE_ID}`);
    if (String(sid) === String(MINE_ID)) {
      console.warn('‚ùå SOCKET BLOCK: B·ªè qua tin c·ªßa ch√≠nh m√¨nh.');
      return;
    }
    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ b·ªã b·ªè qua kh√¥ng
    if (renderedMessageIds.has(msg._id)) {
      // console.warn('Tin nh·∫Øn ƒë√£ b·ªã b·ªè qua v√¨ tr√πng ID:', msg._id);
      return;
    }
    // console.log('üéâ SOCKET PASS: Tin nh·∫Øn ƒë∆∞·ª£c hi·ªÉn th·ªã!');

    // Hi·ªÉn th·ªã tin nh·∫Øn
    appendMessage({
      _id: msg._id,
      senderAvatar: getAvatar(msg.sender),
      senderOnline: msg.sender.online,
      content: msg.content,
      file: msg.image || msg.file,
      createdAt: msg.createdAt
    }, false);

    // Cu·ªôn xu·ªëng cu·ªëi
    messagesEl.scrollTo({ top: messagesEl.scrollHeight, behavior: 'smooth' });
    if (typingIndicatorContainer && messagesEl) {
      messagesEl.appendChild(typingIndicatorContainer);
    }
  } catch (err) {
    console.error('socket newMessage', err);
  }
});



/* ================ PASSWORD POPUP / MODAL LOGIC ================ */

// Ki·ªÉm tra xem user c√≥ c·∫ßn ƒë·ªïi m·∫≠t kh·∫©u hay kh√¥ng (v√† hi·ªÉn th·ªã popup)
async function checkPasswordChangeHint() {
  try {
    const data = await tryFetchJson(['/api/users/profile']);
    if (data?.askChangePassword && passwordPopup) {
      passwordPopup.style.display = 'block';
    }
  } catch (err) {
    console.error('checkPasswordChangeHint', err);
    // Kh√¥ng c·∫ßn l√†m g√¨ kh√°c, n·∫øu l·ªói 401, loadSessionUser ƒë√£ x·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng
  }
}

// M·ªü modal ƒë·ªïi m·∫≠t kh·∫©u
function goToChangePassword() {
  if (passwordPopup) passwordPopup.style.display = 'none';
  if (passwordModal) passwordModal.style.display = 'block';
  if (oldPasswordInput) oldPasswordInput.focus();
}

// ƒê√≥ng modal ƒë·ªïi m·∫≠t kh·∫©u v√† reset input + message
function closePasswordModal() {
  if (passwordModal) passwordModal.style.display = 'none';
  if (passwordMsg) { passwordMsg.textContent = ''; passwordMsg.style.color = ''; }
  if (oldPasswordInput) oldPasswordInput.value = '';
  if (newPasswordInput) newPasswordInput.value = '';
}

// Ho√£n y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u (n·∫øu user click "Nh·∫Øc sau")
async function postponeChange() {
  try {
    await fetch('/api/users/postpone-password-change', { method: 'POST', credentials: 'include' });
    if (passwordPopup) passwordPopup.style.display = 'none';
  } catch (e) {
    console.error('postponeChange failed:', e);
  }
}

// Submit ƒë·ªïi m·∫≠t kh·∫©u
async function submitPasswordChange() {
  const oldPass = oldPasswordInput?.value.trim();
  const newPass = newPasswordInput?.value.trim();

  if (!oldPass || !newPass) {
    if (passwordMsg) { passwordMsg.style.color = '#d00'; passwordMsg.textContent = 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.'; }
    return;
  }

  if (newPass.length < 6) { // Ki·ªÉm tra t·ªëi thi·ªÉu 6 k√Ω t·ª±
    if (passwordMsg) { passwordMsg.style.color = '#d00'; passwordMsg.textContent = 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.'; }
    return;
  }

  if (passwordMsg) { passwordMsg.style.color = '#000'; passwordMsg.textContent = 'ƒêang x·ª≠ l√Ω...'; }

  try {
    const res = await fetch('/api/users/update-password', {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ oldPassword: oldPass, newPassword: newPass })
    });
    const data = await res.json();

    if (data.success) {
      if (passwordMsg) { passwordMsg.style.color = '#0068ff'; passwordMsg.textContent = 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! ‚úÖ'; }
      setTimeout(closePasswordModal, 1500);
      if (passwordPopup) passwordPopup.style.display = 'none';
    } else {
      if (passwordMsg) { passwordMsg.style.color = '#d00'; passwordMsg.textContent = data.error || 'C√≥ l·ªói x·∫£y ra.'; }
    }
  } catch (e) {
    console.error('changePass', e);
    if (passwordMsg) { passwordMsg.style.color = '#d00'; passwordMsg.textContent = 'L·ªói k·∫øt n·ªëi ho·∫∑c l·ªói n·ªôi b·ªô.'; }
  }
}