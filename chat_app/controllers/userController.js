//controllers/userControllers.js
const User   = require('../models/User');
const bcrypt = require('bcrypt');

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
exports.getProfile = async (req, res) => {
  try {
    if (!req.session?.user?._id) {
      return res.status(401).json({ error: 'Ch∆∞a ƒëƒÉng nh·∫≠p' });
    }

    const user = await User.findById(req.session.user._id);
    if (!user) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    res.json({
      _id:      user._id,
      username: user.username,
      nickname: user.nickname,
      avatar:   user.avatar
    });
  } catch (err) {
    console.error('L·ªói getProfile:', err);
    res.status(500).json({ error: 'L·ªói server' });
  }
};

// C·∫≠p nh·∫≠t nickname v√† avatar (sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu)
exports.updateNickname = async (req, res) => {
  try {
    const { nickname, avatar } = req.body;
    if (!nickname || nickname.trim() === '') {
      return res.status(400).json({ error: 'Nickname kh√¥ng h·ª£p l·ªá' });
    }

    const avatarUrl = avatar?.startsWith('/uploads/avatars/')
      ? avatar
      : 'https://i.pinimg.com/originals/8d/a5/c3/8da5c3a06407303694d6381b23368f02.png';

    const updatedUser = await User.findByIdAndUpdate(
      req.session.tempUserId,
      { nickname, avatar: avatarUrl },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }

    req.session.user = {
      _id: updatedUser._id,
      nickname: updatedUser.nickname,
      avatar: updatedUser.avatar
    };

    delete req.session.tempUserId;
    res.json({ success: true });
  } catch (err) {
    console.error('L·ªói updateNickname:', err);
    res.status(500).json({ error: 'L·ªói server' });
  }
};

// C·∫≠p nh·∫≠t avatar ri√™ng (n·∫øu c·∫ßn)
exports.updateAvatar = async (req, res) => {
  try {
    if (!req.file) {
      console.log('‚ùå Kh√¥ng c√≥ file trong req.file');
      return res.status(400).json({ error: 'Kh√¥ng c√≥ file avatar' });
    }

    if (!req.file.mimetype.startsWith('image/')) {
      return res.status(400).json({ error: 'Ch·ªâ ƒë∆∞·ª£c upload ·∫£nh l√†m avatar' });
    }

    const avatarUrl = `/uploads/avatars/${req.file.filename}`;
    const user = await User.findByIdAndUpdate(
      req.session.user._id,
      { avatar: avatarUrl },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t avatar' });
    }

    req.session.user.avatar = user.avatar;
    console.log('üì¶ File nh·∫≠n ƒë∆∞·ª£c:', req.file);

    res.json({ success: true, avatar: user.avatar }); 
  } catch (err) {
    console.error('‚ùå L·ªói updateAvatar:', err);
    res.status(500).json({ error: 'L·ªói server' });
  }
};


exports.updatePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword, confirmPassword } = req.body;

    if (!oldPassword || !newPassword || newPassword !== confirmPassword) {
      return res.status(400).json({ error: 'Sai ƒë·ªãnh d·∫°ng ho·∫∑c m·ªõi/confirm kh√¥ng kh·ªõp' });
    }

    // T·∫£i b·∫£n ghi c√≥ hash m·∫≠t kh·∫©u
    const user = await User.findById(req.session.user._id).select('+password');
    if (!user) return res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });

    // So kh·ªõp m·∫≠t kh·∫©u c≈©
    const ok = await bcrypt.compare(oldPassword, user.password);
    if (!ok) return res.status(400).json({ error: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng' });

    // L∆∞u m·∫≠t kh·∫©u m·ªõi
    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    res.json({ success: true });
  } catch (err) {
    console.error('‚ùå updatePassword error:', err);
    res.status(500).json({ error: 'L·ªói server khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u' });
  }
};

